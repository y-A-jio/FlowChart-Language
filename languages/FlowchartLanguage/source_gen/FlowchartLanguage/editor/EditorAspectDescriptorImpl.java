package FlowchartLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Decision_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new DecisionTransmission_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Delay_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new EmptyStatement_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new End_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new FlowChart_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Procedure_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ProcedureTransmission_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Start_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Statement_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new StatementTransmission_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new DecisionTransmission_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new ProcedureTransmission_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new StatementTransmission_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195d33612L), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195e4bcf9L), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195ded53aL), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195e74e15L), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195ddfd8fL), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x66267d1598c0f0ddL), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195d52992L), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195d5cd2aL), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195dd2abbL), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195d0d89bL), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195d831f5L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195e4bcf9L), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195d5cd2aL), MetaIdFactory.conceptId(0xae0eef6aa0ca474eL, 0x9247c32571221195L, 0x51b93ed195d831f5L)).seal();
}
